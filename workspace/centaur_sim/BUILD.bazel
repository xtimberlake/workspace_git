load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_library",
    "drake_cc_binary",
)

drake_cc_library(
    name = "centaur_sim_lib",
    hdrs = ["centaur_sim.h"],
)

drake_cc_library(
    name = "planner_lib",
    srcs = ["planner.cc"],
    hdrs = ["planner.h"],
    deps = [
        "//systems/framework:leaf_system",
        "//systems/framework:vector",
        "//multibody/plant",
    ],
)



# drake_cc_library(
#     name = "flaoting_base_model_lib",
#     srcs = ["FloatingBaseModel.cc"],
#     hdrs = ["FloatingBaseModel.h"],
#     deps = [
#         "//systems/framework:leaf_system",
#         "//systems/framework:vector",
#         "//systems/framework:witness_function",
#         "//common:find_resource",
#         "//multibody/plant",
#         "//multibody/parsing",
#     ],
# )

drake_cc_library(
    name = "extract_data_lib",
    srcs = ["extract_data.cc"],
    hdrs = ["extract_data.h"],
    deps = [
        "//systems/framework:leaf_system",
        "//systems/framework:vector",
        "//multibody/plant",
        "//multibody/tree",
    ],
)

drake_cc_library(
    name = "centaur_states_lib",
    srcs = [
        "controller/CentaurStates.cc",
        "Utils/Utils.cc",
        "estimator/contactEstimate.cc",
        "estimator/linearKalmanFilter.cc",
     ],
    hdrs = [
        "controller/CentaurStates.h",
        "controller/CentaurParams.h",
        "Utils/Utils.h",
        "Utils/cppTypes.h",
        "estimator/contactEstimate.h",
        "estimator/linearKalmanFilter.h",
        "Utils/butterworthFilter.h",
        "Utils/pseudoInverse.h",
        "estimator/contactEventData.h",
         ],
    data = [
        "centaur_control_model.sdf",
        "centaur_v2.urdf",
        "config/centaur_sim_control_params.yaml",
        "config/centaur_sim_robot_params.yaml",
        "data/human_ref_traj.yaml",
        "data/test.yaml",
        "data/ab13_level_ground.yaml",
        "data/ab14_level_ground.yaml",
        "data/ab15_level_ground.yaml",
        "data/ab16_level_ground.yaml",
        "data/ab17_level_ground.yaml",
        "data/ab6_level_ground_normal.yaml",
        "data/ab7_level_ground_normal.yaml",
        "data/ab8_level_ground_normal.yaml",
        "data/ab9_level_ground_normal.yaml",
        "data/ab10_level_ground_normal.yaml",
        "data/ab11_level_ground_normal.yaml",
        "data/ab12_level_ground_normal.yaml",
        "data/ab13_level_ground_normal.yaml",
        "data/ab14_level_ground_normal.yaml",
        "data/ab15_level_ground_normal.yaml",
        "data/ab16_level_ground_normal.yaml",
        "data/ab17_level_ground_normal.yaml",
        "data/ab18_04_level_ground_normal.yaml",
        "data/ab19_level_ground_normal.yaml",
        "data/ab20_level_ground_normal.yaml",
        "data/ab21_level_ground_normal.yaml",
        "data/ab23_level_ground_normal.yaml",
        "data/ab24_level_ground_normal.yaml",
        "data/ab25_level_ground_normal.yaml",
        "data/ab27_level_ground_normal.yaml",
        "data/ab28_02_level_ground_normal.yaml",
        "data/ab30_level_ground_normal.yaml",
        "data/ab6_treadmill_walking.yaml",
        "data/gaps_stairs_map.yaml",
        "data/gaps_stairs_map2.yaml",
    ],
    deps = [
        "//systems/framework:leaf_system",
        "//systems/framework:vector",
        "//multibody/plant",
        "//multibody/tree",
        "//common:find_resource",
        "//common/yaml",
        "//common/schema",
        "//common",
        
    ],
)

drake_cc_library(
    name = "centaur_controller_lib",
    srcs = [
        "centaur_controller.cc",
        "staticInvController.cc",
        "controller/CentaurControl.cc",
        "controller/CentaurGaitPattern.cc",
        "centaurrobot/centaurrobot.cc",
        "controller/ConvexMPC.cc",
        "Utils/Utils.cc",
        "controller/LegController.cc",
        "controller/WBIController.cc",
        "dynamics/FloatingBaseModel.cpp",
        "dynamics/CentaurModel.cpp",
        "controller/ContactSet/SingleContact.cpp",
        "Utils/Goldfarb_Optimizer/Array.cc",
        "Utils/Goldfarb_Optimizer/QuadProg++.cc",
        "estimator/contactEstimate.cc",
        "estimator/linearKalmanFilter.cc",
    ],
    hdrs = [
        "centaur_controller.h",
        "staticInvController.h",
        "controller/CentaurControl.h",
        "controller/CentaurGaitPattern.h",
        "centaurrobot/centaurrobot.h",
        "controller/ConvexMPC.h",
        "controller/CentaurParams.h",
        "Utils/Utils.h",
        "Utils/cppTypes.h",
        "controller/LegController.h",
        "controller/Task.hpp",
        "controller/Tasks/TorsoPosTask.hpp",
        "controller/Tasks/TorsoOriTask.hpp",
        "controller/Tasks/LinkPosTask.hpp",
        "controller/ContactSet/ContactSpec.hpp",
        "controller/ContactSet/SingleContact.hpp",
        "controller/WBIController.h",
        "dynamics/FloatingBaseModel.h",
        "dynamics/CentaurModel.h",
        "dynamics/spatial.h",
        "Utils/orientationTools.h",
        "Utils/pseudoInverse.h",
        "Utils/Goldfarb_Optimizer/Array.hh",
        "Utils/Goldfarb_Optimizer/QuadProg++.hh",
        "estimator/contactEstimate.h",
        "estimator/linearKalmanFilter.h",
        "Utils/butterworthFilter.h",
        "estimator/contactEventData.h",
        "controller/global_control_flag.h",
    ],
    data = [
        "centaur_control_model.sdf",
        "centaur_v2.urdf",
        "config/centaur_sim_control_params.yaml",
        "config/centaur_sim_robot_params.yaml",
    ],
    deps = [
        ":centaur_states_lib",
        "//systems/framework:leaf_system",
        "//systems/framework:vector",
        "//multibody/plant",
        "//multibody/tree",
        "//multibody/parsing",
        "//multibody/math",
        "//common:find_resource",
        "//common/yaml",
        "//common/schema",
        "//common",
        "//solvers",
        
    ],
)





drake_cc_binary(
    name = "centaur_sim",
    srcs = ["centaur_sim.cc"],
    data = [
        "centaur.urdf",
        "centaur_v3.urdf",
        "centaur_v2.urdf",
        "centaur_sim_scene.sdf",
        "centaur_sim_scene_cheat.sdf",
        "centaur_sim_scene_proprioceptive.sdf",
        "config/test_params.yaml",

    ],
    deps = [
        ":centaur_sim_lib",
        ":planner_lib",
        ":centaur_controller_lib",
        # ":flaoting_base_model_lib",
        ":extract_data_lib", 
        "//common:add_text_logging_gflags",
        "//common:find_resource",
        "//common/proto:call_python",
        "//systems/framework:diagram_builder",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:vector_log_sink",
        "//systems/primitives:zero_order_hold",
        "//systems/analysis:simulator",
        "//geometry:scene_graph",
        "//geometry:drake_visualizer",
        "//multibody/plant",
        "//multibody/parsing",
        "//lcm",
        "//systems/lcm",
        "//solvers:mathematical_program",
        "//solvers:mathematical_program_result",
        "//solvers:mosek_solver",
        "//solvers",
        "//common/yaml",
        "@gflags",
    ],
)